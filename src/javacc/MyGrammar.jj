// MyGrammar.jj
options {
    STATIC = false;
}
PARSER_BEGIN(MyParser)

import java.io.InputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import org.javacc.parser.ParseException;
import org.javacc.parser.Token;

public class MyParser {

    public static void main(String[] args) throws ParseException {
        MyParser parser;
        if (args.length == 0) {
            System.out.println("SBVR Parser: Reading from standard input ...");
            parser = new MyParser(System.in);
        } else if (args.length == 1) {
            try {
                parser = new MyParser(new FileInputStream(args[0]));
            } catch (FileNotFoundException e) {
                System.err.println("File " + args[0] + " not found.");
                return;
            }
        } else {
            System.out.println("SBVR Parser: Usage is one of:");
            System.out.println("         java MyParser < inputfile");
            System.out.println("OR");
            System.out.println("         java MyParser inputfile");
            return;
        }
        try {
            Node result = parser.sbvrRuleList();
            System.out.println("SBVR Parser: SBVR program parsed successfully.");
            printTree(result, 0);
        } catch (ParseException e) {
            System.out.println(e.getMessage());
            System.out.println("SBVR Parser: Encountered errors during parse.");
        }
    }

    private static void printTree(Node node, int level) {
        for (int i = 0; i < level; i++) {
            System.out.print("  ");
        }
        System.out.println(node);
        for (Node child : node.getChildren()) {
            printTree(child, level + 1);
        }
    }
}

PARSER_END(MyParser)

SKIP : {
    " " | "\t" | "\r" | "\n"
}

TOKEN : {
    < SCALAR: (["0"-"9"])+ > |
    < STOCK: "productvoorraad" > |
    < LESSTHAN: "<" > |
    < ORDER: "bestel" > |
    < IF: "als" > |
    < THEN: "dan" > |
    < DOT: "." >
}

Node sbvrRuleList() :
{
    Node node = new Node("sbvrRuleList");
    Node rule;
}
{
    ( rule = sbvrRule() { node.addChild(rule); } )* <EOF>
    { return node; }
}

Node sbvrRule() :
{ Node ifClauseNode; }
{
    ifClauseNode = ifClause() <DOT> { ifClauseNode.setType("sbvrRule"); return ifClauseNode; }
}

Node ifClause() :
{
    Node conditionNode;
    Node actionNode;
}
{
    <IF> conditionNode = condition() <THEN> actionNode = action()
    {
        Node ifNode = new Node("ifClause");
        ifNode.setWord("als dan");
        ifNode.addChild(conditionNode);
        ifNode.addChild(actionNode);
        return ifNode;
    }
}

Node condition() :
{ Node conceptNode; Node scalarNode; }
{
    conceptNode = concept() <LESSTHAN> scalarNode = scalarLiteral()
    {
        Node conditionNode = new Node("condition");
        conditionNode.setWord("<");
        conditionNode.addChild(conceptNode);
        conditionNode.addChild(scalarNode);
        return conditionNode;
    }
}

Node concept() :
{ Token t; Node node; }
{
    t = <STOCK> { node = new Node("concept"); node.setWord(t.image); return node; }
}

Node action() :
{ Token t; Node scalarNode; }
{
    t = <ORDER> scalarNode = scalarLiteral() { Node actionNode = new Node("action"); actionNode.setWord(t.image); actionNode.addChild(scalarNode); return actionNode; }
}

Node scalarLiteral() :
{ Token t; }
{
    t = <SCALAR> { Node node = new Node("scalarLiteral"); node.setType(t.image); node.setWord(t.image); return node; }
}