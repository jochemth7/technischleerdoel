PARSER_BEGIN(MyParser)
public class MyParser {
    public static void main(String[] args) throws ParseException {
        System.out.println("Main method started");
        MyParser parser = new MyParser(System.in);
        try {
            Node result = parser.Start();
            System.out.println("Parsing completed successfully!");
            printTree(result, 0);
        } catch (ParseException e) {
            System.out.println("Parsing failed: " + e.getMessage());
        }
    }

    private static void printTree(Node node, int level) {
        for (int i = 0; i < level; i++) {
            System.out.print("  ");
        }
        System.out.println(node);
        for (Node child : node.getChildren()) {
            printTree(child, level + 1);
        }
    }
}
PARSER_END(MyParser)

SKIP : {
    " " | "\t" | "\n" | "\r"
}

TOKEN : {
    < PLUS: "+" > |
    < MINUS: "-" > |
    < LPAREN: "(" > |
    < RPAREN: ")" > |
    < NUMBER: (["0"-"9"])+ >
}

Node Start() :
{
    Node node;
}
{
    node = Expr() <EOF>
    {
        return node;
    }
}

Node Expr() :
{
    Node node = new Node("Expr");
    Node term;
}
{
    term = Term()
    {
        node.addChild(term);
    }
    (
        <PLUS>
        {
            Node plusNode = new Node("PLUS");
            node.addChild(plusNode);
            term = Term();
            node.addChild(term);
        }
        |
        <MINUS>
        {
            Node minusNode = new Node("MINUS");
            node.addChild(minusNode);
            term = Term();
            node.addChild(term);
        }
    )*
    {
        return node;
    }
}

Node Term() :
{
    Token number;
    Node node = new Node("Term");
}
{
    number = <NUMBER>
    {
        Node numberNode = new Node(number.image);
        node.addChild(numberNode);
        return node;
    }
    |
    <LPAREN> Expr() <RPAREN>
    {
        Node parenNode = new Node("PAREN");
        parenNode.addChild(node);
        return parenNode;
    }
}